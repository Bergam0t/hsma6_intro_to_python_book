[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HSMA - Programming in Python",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "printing.html",
    "href": "printing.html",
    "title": "3  Printing",
    "section": "",
    "text": "There is a tradition in Computer Science that the first program anyone should write in a Programming Language is one that writes the words “Hello World!” to the screen.\n(Look, back in my day (the 80s), getting a machine to display anything on your TV was pretty amazing stuff!)\nLet’s write a Hello World program in Python.\nIn Principles of Programming, we talked about functions. We said that they are bundles of code that we can run every time we call them. We can give them optional inputs, and may get some outputs.\nTo write text to the screen in Python, we use something known as the print() function. The input (that we put in the brackets) is the thing we want it to write to the screen.\nLet’s try it!\nWe use quotation marks “ to denote a string (ie text - a series of characters). We can also use single quotes ’. Either is fine, but you must use the same one to open and close the same string.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTip\n\n\n\nIf we were to do this in VSCode, we would create a new Python(.py) file\n\nWhen we type the above, nothing happens. That’s because we need to run the program. \nThis is exciting isn’t it. (Don’t worry, it gets better)",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Printing</span>"
    ]
  },
  {
    "objectID": "variables.html",
    "href": "variables.html",
    "title": "4  Variables",
    "section": "",
    "text": "In Principles of Programming, we talked about variables. We said these are essentially boxes that store information of a certain type so the program can refer to it later.\nIn many programming languages, we need to create a variable by declaring it. This means specifying its type alongside its name.\nIn Python, things are much more laid back. Variables are dynamic, so we simply assign a value to a name to create the variable, and the type will be automatically set based on the Value we provide. We assign values in Python using the assignment operator =. It basically says “Let this have a value of this”.\nThis can cause confusion if you’re new to coding. = does not mean ‘equals’.\nWhat will be the variable type of each of these variables after assignment? \nBecause variables in Python are dynamic, their type will change if we give it a value of a different type :\n\n\n4.0.1 Dealing with spaces in names\nIn programming languages, a space indicates a separation between instructions, values etc. So if we want to name something (like a variable) with multiple words then we can’t use spaces. There are two principle conventions for how we deal with this :\n\nYou can use whichever you prefer (though ensure you’re consistent) but snake_case is generally preferred for (and recommended by the developers of) Python.\n\n\n4.0.2 Variable Types - Single Items\nLet’s remind ourselves of some of the main types of variable, and see what they look like in Python.\n\n4.0.2.1 Numbers\nIntegers (int) are whole numbers Floating point numbers (float) are numbers with up to 15 decimal places\n\n\n\n4.0.2.2 Text\nStrings (str) are sequences of characters denoted using “ or ‘ (Note - Python does not have a separate variable type for characters, they are just strings of length 1)\n\n\n\n4.0.2.3 Truth\nBooleans (bool) take one of two values to indicate whether they are True or False.\n\n\n\n\n4.0.3 Variables that store Multiple Items\n\n4.0.3.1 Lists\nLists (list) are sequences of items, where the order matters. Duplicates allowed.\n\n\n\n4.0.3.2 Sets\nSets (set) are unordered sequences of unique items.\n\n\n\n\n\n\n\nTip\n\n\n\nYou won’t come across sets too often in Python - so don’t worry about them too much for now!\n\n\n\n\n4.0.3.3 Tuples\nTuples (tuple) are ordered sequences (like a list) but are immutable (once created, they cannot be changed)\n\n\n\n\n\n\n\nTip\n\n\n\nYou won’t come across tuples too often in Python - so don’t worry about them too much for now!\n\n\n\n\n4.0.3.4 Dictionaries\nDictionaries (dict) are unordered collections of key-value pairs",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Variables</span>"
    ]
  },
  {
    "objectID": "fstrings.html",
    "href": "fstrings.html",
    "title": "5  Variables and Printing together - the fString",
    "section": "",
    "text": "Python has a rather neat type of string called an fString. These are strings where we can include formatting within the string to define where we want dynamic text.\nWe often want to do this where we want to insert the value of a variable into a string of text.\ne.g. “Her name is &lt;&gt;”\nTo use fStrings, we simply put the character f immediately before our opening quotation mark, and use curly brackets to denote where we want to include the name of a variable, so that Python will pull in the value in that variable instead of hard-coded text.\nExample :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can also do some other cool things with fStrings. We’re not restricted to just variable names either, we can put in the curly brackets any instruction whose output will result in something that can be interpreted as a string (ie some characters).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Variables and Printing together - the fString</span>"
    ]
  },
  {
    "objectID": "user_input_casting.html",
    "href": "user_input_casting.html",
    "title": "6  User Input and Changing Variable Types",
    "section": "",
    "text": "6.1 User Input\nSometimes we need to ask the user to input something in order to continue with the program.\nIn Python, getting input from the user is easy. We simply tell Python that we need an input, any message we want to display to the user, and the name of the variable in which we want to store the input.\nage = input(\"How old are you?: \")",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>User Input and Changing Variable Types</span>"
    ]
  },
  {
    "objectID": "user_input_casting.html#user-input",
    "href": "user_input_casting.html#user-input",
    "title": "6  User Input and Changing Variable Types",
    "section": "",
    "text": "Important\n\n\n\nHOWEVER, when we read in the inputs from a user, regardless of what it is supposed to represent, they will be read in as a sequence of characters. In other words, as a string.\nClearly, if we’re reading in something intended to be a number (like an age) that’s no good. So what can we do?\nWell, we are wizards…",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>User Input and Changing Variable Types</span>"
    ]
  },
  {
    "objectID": "user_input_casting.html#casting",
    "href": "user_input_casting.html#casting",
    "title": "6  User Input and Changing Variable Types",
    "section": "6.2 Casting",
    "text": "6.2 Casting\nPython allows us to turn one type of variable into another, like a magic spell. This is known as casting. As long as the value stored in the variable can be interpreted as the type we’re trying to cast it into, it’ll work (otherwise we’ll get an error).\nTo cast, we simply wrap the variable on which we’re performing the cast in brackets, and tell it the type of variable we want it to become.\n\nage = input(\"How old are you?: \")\nint(age)\n\nWe could also do that all in one line of code :\n\nage = int(input(\"How old are you?: \"))\n\nThis will only work if the user inputs something that can be interpreted as an integer. “42” will work. “Too old” will not work.\n\n\n\n\n\n\nWarning\n\n\n\nNote - you can cast a float value (e.g. 42.6547) as an integer (it’ll just ignore the decimal place and create an int value of 42 - it won’t round).\nHOWEVER, this won’t work for strings - you can’t cast “42.6547” as a string into an int.",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>User Input and Changing Variable Types</span>"
    ]
  },
  {
    "objectID": "mathematical_operators.html",
    "href": "mathematical_operators.html",
    "title": "7  Mathematical Operators",
    "section": "",
    "text": "7.1 Modulus\n10 % 3 This means divide 10 by 3, and return the remainder.\n3 goes into 10 three times, but we’re left with 1 left over (3 x 3 = 9) - a remainder of 1.\nSo 10 % 3 = 1.\n20 % 2 This means divide 20 by 2, and return the remainder.\n2 goes into 20 exactly 10 times, with nothing left over (no remainder).\nSo 20 % 2 = 0.",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Mathematical Operators</span>"
    ]
  },
  {
    "objectID": "mathematical_operators.html#modulus",
    "href": "mathematical_operators.html#modulus",
    "title": "7  Mathematical Operators",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Mathematical Operators</span>"
    ]
  },
  {
    "objectID": "exercise_10_years_forward.html",
    "href": "exercise_10_years_forward.html",
    "title": "8  Exercise: 10 years forward",
    "section": "",
    "text": "8.1 Sample Answer",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exercise: 10 years forward</span>"
    ]
  },
  {
    "objectID": "exercise_10_years_forward.html#sample-answer",
    "href": "exercise_10_years_forward.html#sample-answer",
    "title": "8  Exercise: 10 years forward",
    "section": "",
    "text": "Click here to view a sample answer\n\n\n\n\n\n\nname = input(\"What is your name?\")\nage = int(input(\"How old are you?\"))\n\nprint (f\"Hello {name}.  In 10 years time, you will be {age+10}\")",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exercise: 10 years forward</span>"
    ]
  },
  {
    "objectID": "exercise_10_years_forward.html#answer-video",
    "href": "exercise_10_years_forward.html#answer-video",
    "title": "8  Exercise: 10 years forward",
    "section": "8.2 Answer Video",
    "text": "8.2 Answer Video\n\n\n\n\n\n\nClick here to view a video explaining the solution\n\n\n\n\n\nComing Soon!",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exercise: 10 years forward</span>"
    ]
  },
  {
    "objectID": "comments.html",
    "href": "comments.html",
    "title": "9  Comments",
    "section": "",
    "text": "When writing code, it is extremely important to write comments that explain how each piece of code works (this might be for an individual line of code, or a block of code).\nThis is important to help others understand how your code works, but also to help you remember how your code works…\n\nThere are two ways of writing comments in Python.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Your Next Python Skills",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Comments</span>"
    ]
  },
  {
    "objectID": "conditional_logic.html",
    "href": "conditional_logic.html",
    "title": "10  Conditional Logic",
    "section": "",
    "text": "10.1 Comparison Operators\nThere are many comparison operators in Python. We use these to express relational statements that resolve to a Boolean - True or False. They are therefore used in conditional logic.",
    "crumbs": [
      "Your Next Python Skills",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Conditional Logic</span>"
    ]
  },
  {
    "objectID": "exercise_conditional_logic_etc.html",
    "href": "exercise_conditional_logic_etc.html",
    "title": "11  Exercise",
    "section": "",
    "text": "11.1 Sample Answers",
    "crumbs": [
      "Your Next Python Skills",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Exercise</span>"
    ]
  },
  {
    "objectID": "exercise_conditional_logic_etc.html#sample-answers",
    "href": "exercise_conditional_logic_etc.html#sample-answers",
    "title": "11  Exercise",
    "section": "",
    "text": "Click here to view the answers\n\n\n\n\n\nOpen Exercise 2 SOLUTIONS in Google Colab:",
    "crumbs": [
      "Your Next Python Skills",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Exercise</span>"
    ]
  },
  {
    "objectID": "exercise_conditional_logic_etc.html#answer-video",
    "href": "exercise_conditional_logic_etc.html#answer-video",
    "title": "11  Exercise",
    "section": "11.2 Answer Video",
    "text": "11.2 Answer Video\n\n\n\n\n\n\nClick here to view a video explaining the solution\n\n\n\n\n\nComing Soon!",
    "crumbs": [
      "Your Next Python Skills",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Exercise</span>"
    ]
  },
  {
    "objectID": "loops.html",
    "href": "loops.html",
    "title": "12  Loops",
    "section": "",
    "text": "12.1 For Loops\nA simple for loop might look like this.\nThe code in the for loop can be anything you like!",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Loops</span>"
    ]
  },
  {
    "objectID": "loops.html#for-loops",
    "href": "loops.html#for-loops",
    "title": "12  Loops",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n12.1.1 Using a custom range in for loops\nA more advanced for loop might specify which number to start and finish at.\nWe can use the range() function in python to do this.\nThe first argument to range specifies which number to start at, and the second specifies where to end.\nNote that our counter will start at the number specified, but the end number won’t be included!\n\nYou can play around with this in the code cell below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n12.1.2 Using a custom increment in for loops\nTaking this even further, we can add a third parameter to the range() function. This changes the step (the gap) between our numbers.\n\nYou can play around with this in the code cell below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n12.1.3 Counting down\nWe can also count down. This is sometimes referred to as a negative increment or decrement.\n\nPlay around with this here.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n12.1.4 Iterating through a list in a for loop\nOne very powerful aspect of for loops is being able to iterate through a list.\n\nFor example - you might have a list of 5 regions you need to run a report for. You could create a list of those regions, filter your dataset down to just the data for that region, then export a data file for each separate region. It’s a very useful pattern!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Loops</span>"
    ]
  },
  {
    "objectID": "loops.html#while-loops",
    "href": "loops.html#while-loops",
    "title": "12  Loops",
    "section": "12.2 While Loops",
    "text": "12.2 While Loops\nWhile loops are another powerful type of loop, though you might use them less frequently than for loops.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Loops</span>"
    ]
  },
  {
    "objectID": "loops.html#breaking-from-loops",
    "href": "loops.html#breaking-from-loops",
    "title": "12  Loops",
    "section": "12.3 Breaking from loops",
    "text": "12.3 Breaking from loops\nSometimes we want to break out of a loop mid-flow. For example, we may have a for loop, and want to break out of it when a condition has been met.\nWe can do this using the break command, which immediately breaks out of the loop and continues as though the for loop had completed.\n\nYou can experiment with changing the break condition in the code cell below. What happens if you change the condition to total &gt; 6? What about total &gt; 11?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Loops</span>"
    ]
  },
  {
    "objectID": "loops.html#infinite-loops",
    "href": "loops.html#infinite-loops",
    "title": "12  Loops",
    "section": "12.4 Infinite loops",
    "text": "12.4 Infinite loops\nSometimes you can accidentally write an infinite loop – one that will never end. Anybody who used to play with BASIC in the old days will remember an example of an infinite loop :\n10 PRINT “HELLO WORLD”\n20 GOTO 10\nMore modern examples include setting up a while loop that can never stop.\nThis loop will never terminate because we never change the value of true!\n\nIn the loop below - assuming our value of x was greater than or equal to 3 to begin with - it will keep triggering because x is getting bigger with each loop (as we’re adding 1 to it).\n\n\n\n\n\n\n\nTip\n\n\n\nIf you find yourself stuck in an infinite loop (and you will at some point), you need to interrupt the kernel and terminate the program.\nTo do this in VSCode, click the Interrupt button in your Interactive Window (Note - if it is currently expecting a user input, you’ll need to interrupt and then cancel out of the user input).",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Loops</span>"
    ]
  },
  {
    "objectID": "exercise_loops.html",
    "href": "exercise_loops.html",
    "title": "13  Exercise",
    "section": "",
    "text": "13.1 Sample Answers",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercise</span>"
    ]
  },
  {
    "objectID": "exercise_loops.html#sample-answers",
    "href": "exercise_loops.html#sample-answers",
    "title": "13  Exercise",
    "section": "",
    "text": "Click here to view the answers\n\n\n\n\n\nOpen Exercise 3 SOLUTIONS in Google Colab:",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercise</span>"
    ]
  },
  {
    "objectID": "exercise_loops.html#answer-video",
    "href": "exercise_loops.html#answer-video",
    "title": "13  Exercise",
    "section": "13.2 Answer Video",
    "text": "13.2 Answer Video\n\n\n\n\n\n\nClick here to view a video explaining the solution\n\n\n\n\n\nComing Soon!",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercise</span>"
    ]
  },
  {
    "objectID": "lists.html",
    "href": "lists.html",
    "title": "14  Lists",
    "section": "",
    "text": "14.1 Indices\nLists are ordered, which means that we can refer to elements in a list by their location - their index.\nTo refer to an element in a list by its index, we use the following notation :\nmy_list[x]\nwhere x is the index number of the element we want to reference.\nHOWEVER, Python (like many languages) starts counting from 0. Which means the first element of a list has an index of 0, the second an index of 1 etc. This will catch you out if you’re new to coding, especially as a few constructs in Python start counting from 1…\nSo, to reference the fourth element in a list my_list, we would use :\nmy_list[3]\nLet’s run this below! Try changing the index (the ‘3’) in the line print(my_list[3])",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "lists.html#indices",
    "href": "lists.html#indices",
    "title": "14  Lists",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "lists.html#negative-indexing-and-slicing",
    "href": "lists.html#negative-indexing-and-slicing",
    "title": "14  Lists",
    "section": "14.2 Negative Indexing and Slicing",
    "text": "14.2 Negative Indexing and Slicing\nWe can also use negative indexing to refer to an item based on its position from the end of the list. Here, -1 would refer to the last element, -2 to the penultimate element etc.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf we want to refer to multiple items in a list, we can use a slice. Here, we use a colon to denote the indices of the start and end elements that we want.\n\n\n\n\n\n\nTip\n\n\n\nThe start element is included.\nThe end element is not included.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "lists.html#length-and-removal",
    "href": "lists.html#length-and-removal",
    "title": "14  Lists",
    "section": "14.3 Length and Removal",
    "text": "14.3 Length and Removal\nTo find the length of a list (the number of elements it contains), we simply use the len() function :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can remove an item from a list by specifying the element we want to remove, and using remove :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOr by giving the index of the element we want to remove, and using pop:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf we want to remove the last element from a list, we can just use pop without specifying an index :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "lists.html#checking-existence",
    "href": "lists.html#checking-existence",
    "title": "14  Lists",
    "section": "14.4 Checking Existence",
    "text": "14.4 Checking Existence\nWe can check whether or not an element exists in a list using conditional logic combined with the in keyword :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOr whether something is not in a list by additionally using the not keyword :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "lists.html#copying-lists",
    "href": "lists.html#copying-lists",
    "title": "14  Lists",
    "section": "14.5 Copying lists",
    "text": "14.5 Copying lists\nIf we want to copy a list, we might be tempted to write this :\n\nmy_list = [3, 4, 7, \"hello\", 2]\ncopy_of_my_list = my_list\n\nThe previous example will create a second reference to the same list. In other words, there is still one list, just two different names for it.\nTo create a copy, we need to use the copy() function of a list object :\n\nmy_list = [3, 4, 7, \"hello\", 2]\ncopy_of_my_list = my_list.copy()\n\nNow we have two lists, and can work with them independently (ie changes made to one will not affect the other).",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "list_comprehensions.html",
    "href": "list_comprehensions.html",
    "title": "15  List Comprehensions",
    "section": "",
    "text": "Python has a really useful feature called “List Comprehension” that allows us to easily create lists based off of other lists using a single line of code.\nLet’s consider an example. Let’s imagine we have a list of numbers, and we want to set up a second list containing all the numbers of the first list, but doubled. Here’s one way we could do (without list comprehension) :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBut a list comprehension replaces three of the lines of code here to create list_b with a single line of code :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou may find it easier to read a list comprehension from the middle. The above says for each value in list_a, give me back that value doubled and add that as an element to list_b.\nWe can also add conditional logic to a list comprehension, so that we only include elements that meet certain criteria.\nWhat numbers will be in list_b in the example below?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe’ve asked the list comprehension to only include numbers that have a remainder of 0 when dividing by 2, and dividing an even number by 2 will give a remainder of 0.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>List Comprehensions</span>"
    ]
  },
  {
    "objectID": "dictionaries.html",
    "href": "dictionaries.html",
    "title": "16  Dictionaries",
    "section": "",
    "text": "Dictionaries are another way in which we can store multiple values in Python. Unlike lists, they are unordered (the order doesn’t matter), and instead each value is associated with a lookup key. This allows us to store values against something that describes that value being stored. Dictionaries are structured as key : value pairs.\nLet’s create an example dictionary. We use curly brackets to denote dictionaries.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTip\n\n\n\nNotice that our keys (the bit on the left hand side of the colon) are strings.\nHowever - the bits on the right of the colon - our values - can be anything! We could even use lists or other dictionaries.\nDictionaries are fine with a variety of types being used as values within a single dictionary object.\n\n\nTo refer to a value in a dictionary, we just provide the key :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can also update the value of a key this way.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can add new key : value pairs in the same way :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can also delete ones we don’t need.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Dictionaries</span>"
    ]
  },
  {
    "objectID": "exercise_lists_dictionaries.html",
    "href": "exercise_lists_dictionaries.html",
    "title": "17  Exercise",
    "section": "",
    "text": "17.1 Sample Answers",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Exercise</span>"
    ]
  },
  {
    "objectID": "exercise_lists_dictionaries.html#sample-answers",
    "href": "exercise_lists_dictionaries.html#sample-answers",
    "title": "17  Exercise",
    "section": "",
    "text": "Click here to view the answers\n\n\n\n\n\nOpen Exercise 4 SOLUTIONS in Google Colab:",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Exercise</span>"
    ]
  },
  {
    "objectID": "exercise_lists_dictionaries.html#answer-video",
    "href": "exercise_lists_dictionaries.html#answer-video",
    "title": "17  Exercise",
    "section": "17.2 Answer Video",
    "text": "17.2 Answer Video\n\n\n\n\n\n\nClick here to view a video explaining the solution\n\n\n\n\n\nComing Soon!",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Exercise</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  }
]